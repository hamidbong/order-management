pipeline {
  agent any
  environment {
    SERVICES = 'order-service,user-service'
    BUILD_STATE_FILE = '.build-state.json'
  }

  stages {
    stage('Initialisation') {
      steps {
        script {
          // Initialisation des structures de données
          def buildData = [
            results: [:],
            state: [
              branch: env.BRANCH_NAME,
              buildNumber: env.BUILD_NUMBER,
              buildUrl: env.BUILD_URL,
              timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
              services: [:],
              previousState: [:]
            ]
          ]

          // Sauvegarde initiale des données
          env.BUILD_DATA = groovy.json.JsonOutput.toJson(buildData)
        }
      }
    }

    stage('Récupération état précédent') {
      steps {
        script {
          // Récupération des données
          def buildData = new groovy.json.JsonSlurper().parseText(env.BUILD_DATA)

          try {
            // Tentative de récupération de l'état précédent
            step([
              $class: 'CopyArtifact',
              projectName: env.JOB_NAME,
              selector: lastSuccessful(),
              filter: env.BUILD_STATE_FILE,
              target: '.',
              flatten: true
            ])
            echo "✅ Artefact récupéré avec succès"

            if (fileExists(env.BUILD_STATE_FILE)) {
              def content = readFile(env.BUILD_STATE_FILE).trim()
              if (content && !content.allWhitespace) {
                def previousState = new groovy.json.JsonSlurper().parseText(content)
                buildData.state.previousState = previousState.previousState ?: [:]
                echo "✅ État précédent chargé"
              }
            }
          } catch (Exception e) {
            echo "⚠️ Impossible de restaurer l'artefact : ${e.message}"
          }

          // Mise à jour des données
          env.BUILD_DATA = groovy.json.JsonOutput.toJson(buildData)
        }
      }
    }

    stage('Détection changements') {
      steps {
        script {
          def buildData = new groovy.json.JsonSlurper().parseText(env.BUILD_DATA)
          def changedFiles = []

          try {
            // Détection des fichiers modifiés
            def gitPrevious = sh(
              script: 'git rev-parse HEAD~1 2>/dev/null || echo HEAD',
              returnStdout: true
            ).trim()
            
            def gitCurrent = sh(
              script: 'git rev-parse HEAD',
              returnStdout: true
            ).trim()
            
            changedFiles = sh(
              script: "git diff --name-only ${gitPrevious} ${gitCurrent} || echo ''",
              returnStdout: true
            ).trim().split('\n').findAll { it.trim() }

            echo "🔍 Fichiers modifiés détectés: ${changedFiles.size()}"
          } catch (Exception e) {
            echo "⚠️ Erreur détection changements : ${e.message}"
            currentBuild.result = 'UNSTABLE'
          }

          // Détermination des services affectés
          try {
            def services = env.SERVICES.split(',').collect { it.trim() }.findAll { it }
            def affectedServices = services.findAll { service ->
              changedFiles.any { file -> file.startsWith("${service}/") }
            } as Set

            // Ajout des services précédemment en échec
            if (buildData.state.previousState?.services instanceof Map) {
              def previouslyFailed = buildData.state.previousState.services.findAll { k, v ->
                v?.status == 'FAILURE'
              }?.keySet()
              affectedServices.addAll(previouslyFailed ?: [])
            }

            env.AFFECTED_SERVICES = affectedServices.join(',')
            echo "🚀 Services à builder: ${affectedServices}"
          } catch (Exception e) {
            echo "⚠️ Erreur calcul services : ${e.message}"
            currentBuild.result = 'UNSTABLE'
            env.AFFECTED_SERVICES = ''
          }

          env.BUILD_DATA = groovy.json.JsonOutput.toJson(buildData)
        }
      }
    }

    stage('Construction des services') {
      steps {
        script {
          def buildData = new groovy.json.JsonSlurper().parseText(env.BUILD_DATA)
          def servicesToBuild = env.AFFECTED_SERVICES?.split(',')?.collect { it.trim() }?.findAll { it } ?: []

          if (servicesToBuild.isEmpty()) {
            echo "ℹ️ Aucun service à builder"
          } else {
            // Construction en parallèle
            def parallelStages = [:]
            
            servicesToBuild.each { service ->
              parallelStages["Build ${service}"] = {
                try {
                  echo "🚀 Démarrage build pour ${service}"
                  
                  def buildResult = build(
                    job: "${service}/main",
                    wait: true,
                    propagate: false,
                    parameters: [],
                    timeout: time(time: 30, unit: 'MINUTES')
                  )
                  
                  // Enregistrement des résultats
                  buildData.results[service] = buildResult.result
                  buildData.state.services[service] = [
                    status: buildResult.result,
                    buildNumber: buildResult.number,
                    buildUrl: buildResult.absoluteUrl,
                    timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                  ]
                  
                  echo "🔎 Résultat ${service}: ${buildResult.result}"
                } catch (Exception e) {
                  buildData.results[service] = 'FAILURE'
                  buildData.state.services[service] = [
                    status: 'FAILURE',
                    error: e.message,
                    timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                  ]
                  echo "❌ Erreur build ${service}: ${e.message}"
                  currentBuild.result = 'FAILURE'
                }
              }
            }
            
            // Exécution parallèle
            parallel parallelStages
          }

          // Préparation pour la prochaine exécution
          buildData.state.previousState = [
            services: buildData.state.services
          ]

          // Sauvegarde des données
          env.BUILD_DATA = groovy.json.JsonOutput.toJson(buildData)
        }
      }
    }

    stage('Sauvegarde état') {
      steps {
        script {
          def buildData = new groovy.json.JsonSlurper().parseText(env.BUILD_DATA)

          // Sauvegarde thread-safe de l'état
          lock('build-state-lock') {
            try {
              def jsonContent = groovy.json.JsonOutput.prettyPrint(
                groovy.json.JsonOutput.toJson(buildData.state)
              )
              writeFile file: env.BUILD_STATE_FILE, text: jsonContent
              echo "✅ État sauvegardé dans ${env.BUILD_STATE_FILE}"
            } catch (Exception e) {
              echo "❌ Erreur écriture état : ${e.getMessage()}"
              currentBuild.result = 'FAILURE'
            }
          }
        }
      }
    }
  }

  post {
    always {
      script {
        def buildData = new groovy.json.JsonSlurper().parseText(env.BUILD_DATA ?: '{}')

        // Archivage des artefacts
        try {
          archiveArtifacts artifacts: env.BUILD_STATE_FILE, fingerprint: true
        } catch (Exception e) {
          echo "⚠️ Erreur archivage : ${e.message}"
        }

        // Rapport des résultats
        echo "📝 Résumé des builds :"
        if (buildData.results) {
          buildData.results.each { service, result ->
            echo "🔎 ${service} : ${result}"
          }

          def stats = [
            total: buildData.results.size(),
            success: buildData.results.count { k, v -> v == 'SUCCESS' },
            failure: buildData.results.count { k, v -> v == 'FAILURE' },
            aborted: buildData.results.count { k, v -> v == 'ABORTED' }
          ]

          echo "📊 TOTAL: ${stats.total}, SUCCÈS: ${stats.success}, ÉCHECS: ${stats.failure}, ABANDONNÉS: ${stats.aborted}"
        } else {
          echo "ℹ️ Aucun résultat de build à afficher"
        }
      }
    }
  }
}