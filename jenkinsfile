def buildResults = [:]
//def buildState = [:]

pipeline {
  agent any
  environment {
    SERVICES = 'order-service,user-service'
    BUILD_STATE_FILE = '.build-state.json'
  }

  stages {
    stage('Préparation') {
      steps {
        script {
          def buildState = [:]  // Déclarée ici uniquement
          try {
            step([
              $class: 'CopyArtifact',
              projectName: env.JOB_NAME,
              selector: lastSuccessful(),
              filter: env.BUILD_STATE_FILE,
              target: '.',
              flatten: true
            ])
            echo "✅ Artefact récupéré avec succès"
          } catch (Exception e) {
            echo "⚠️ Impossible de restaurer l'artefact : ${e.message}"
          }

          buildState = [
            branch: env.BRANCH_NAME,
            buildNumber: env.BUILD_NUMBER,
            buildUrl: env.BUILD_URL,
            timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            services: [:],
            previousState: [:]
          ]

          // Chargement état précédent
          if (fileExists(env.BUILD_STATE_FILE)) {
            try {
              def content = readFile(env.BUILD_STATE_FILE).trim()
              if (content && !content.allWhitespace) {
                echo "Contenu précédent:\n${content}"
                // Sécurité contre LazyMap
                def safeJson = groovy.json.JsonOutput.toJson(
                  new groovy.json.JsonSlurper().parseText(content)
                )
                buildState.previousState = new groovy.json.JsonSlurper().parseText(safeJson) as Map
                echo "✅ État précédent chargé"
              } else {
                echo "⚠️ Fichier d'état vide"
              }
            } catch (Exception e) {
              echo "⚠️ Erreur parsing JSON : ${e.getMessage()}"
            }
          } else {
            echo "ℹ️ Aucun fichier d'état trouvé"
          }
          // Détection des fichiers changés
          def changedFiles = []
          try {
            def gitPrevious = sh(script: 'git rev-parse HEAD~1 || echo HEAD', returnStdout: true).trim()
            def gitCurrent = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()

            changedFiles = sh(
              script: "git diff --name-only ${gitPrevious} ${gitCurrent}",
              returnStdout: true
            ).trim().split('\n').findAll { it.trim() }
            echo "🔍 Fichiers modifiés : ${changedFiles}"
          } catch (Exception e) {
            echo "⚠️ Erreur détection changements : ${e.getMessage()}"
          }

          // Services affectés
          def services = env.SERVICES.split(',').collect { it.trim() } as Set
          def affectedServices = services.findAll { service ->
            changedFiles.any { file -> file.startsWith("${service}/") }
          } as Set

          // Ajouter ceux en échec précédemment
          if (buildState.previousState?.services instanceof Map) {
            def previouslyFailed = buildState.previousState.services.findAll { k, v ->
              v?.status == 'FAILURE'
            }?.keySet()
            affectedServices.addAll(previouslyFailed)
          }

          echo "🚀 Services à builder : ${affectedServices}"
          env.AFFECTED_SERVICES = affectedServices.join(',')
        }
      }
    }

    stage('Build Microservices') {
      steps {
        script {
          def servicesToBuild = env.AFFECTED_SERVICES.split(',').collect { it.trim() }.findAll { it }

          if (servicesToBuild.isEmpty()) {
            echo "ℹ️ Aucun service à builder"
          } else {
            servicesToBuild.each { service ->
              echo "🚀 Déclenchement du job pour ${service}"
              def buildResult = build job: "${service}/main",
                                     wait: true,
                                     propagate: false,
                                     parameters: []

              echo "🔎 Résultat ${service} : ${buildResult.result}"

              buildResults[service] = buildResult.result
              buildState.services[service] = [
                status: buildResult.result,
                buildNumber: buildResult.number,
                buildUrl: buildResult.absoluteUrl,
                timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
              ]
            }
          }

          try {
            def jsonContent = groovy.json.JsonOutput.prettyPrint(
              groovy.json.JsonOutput.toJson(buildState)
            )
            writeFile file: env.BUILD_STATE_FILE, text: jsonContent
            echo "✅ État sauvegardé dans ${env.BUILD_STATE_FILE}"
          } catch (Exception e) {
            echo "❌ Erreur écriture état : ${e.getMessage()}"
          }
        }
      }
    }
  }

  post {
    failure {
      echo "❌ Pipeline orchestrateur échoué."
    }

    always {
      archiveArtifacts artifacts: env.BUILD_STATE_FILE, fingerprint: true
      echo "📝 Résumé des builds :"
      script {
        buildResults.each { service, result ->
          echo "🔎 ${service} : ${result}"
        }

        def successCount = buildResults.count { k, v -> v == 'SUCCESS' }
        def failureCount = buildResults.count { k, v -> v == 'FAILURE' }
        def abortedCount = buildResults.count { k, v -> v == 'ABORTED' }

        echo "📊 TOTAL: ${buildResults.size()}, SUCCÈS: ${successCount}, ÉCHECS: ${failureCount}, ABANDONNÉS: ${abortedCount}"

        if (fileExists(env.BUILD_STATE_FILE)) {
          echo "📂 Contenu du fichier d'état :"
          echo readFile(env.BUILD_STATE_FILE)
        }
      }
    }
  }
}
