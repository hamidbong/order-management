def buildResults = [:]
def buildState = [:]

pipeline {
  agent any
  environment {
    SERVICES = 'order-service,user-service'
    BUILD_STATE_FILE = '.build-state.json'
  }
  
  stages {
    stage('Préparation') {
      steps {
        script {
          // 🟡 Restaurer le fichier d'état du dernier build réussi
          try {
            step([
              $class: 'CopyArtifact',
              projectName: env.JOB_NAME,
              selector: lastSuccessful(),
              filter: env.BUILD_STATE_FILE,
              target: '.',
              flatten: true
            ])
            echo "✅ Artefact récupéré avec succès"
          } catch (Exception e) {
            echo "⚠️ Impossible de restaurer l'artefact : ${e.message}"
          }
          
          // Initialiser buildState avec la structure de base
          buildState = [
            branch: env.BRANCH_NAME,
            buildNumber: env.BUILD_NUMBER,
            buildUrl: env.BUILD_URL,
            timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            services: [:],
            previousState: [:]  // Initialiser explicitement comme objet vide
          ]
          
          // Charger l'état précédent avec une gestion plus robuste
          if (fileExists(env.BUILD_STATE_FILE)) {
            try {
              def previousContent = readFile(env.BUILD_STATE_FILE).trim()
              
              if (previousContent && !previousContent.allWhitespace) {
                echo "Contenu du fichier précédent:\n${previousContent}"
                // Conversion explicite en Map
                def parsedContent = new groovy.json.JsonSlurper().parseText(previousContent) as Map
                
                if (parsedContent && !parsedContent.isEmpty()) {
                  buildState.previousState = parsedContent ?: [:]
                  echo "✅ État précédent chargé avec succès"
                } else {
                  echo "⚠️ Fichier JSON parsé mais vide"
                  buildState.previousState = [:]
                }
              } else {
                echo "⚠️ Fichier d'état existant mais vide ou ne contenant que des espaces"
                buildState.previousState = [:]
              }
            } catch (Exception e) {
              echo "⚠️ Erreur lors du parsing du fichier d'état: ${e.getMessage()}"
              buildState.previousState = [:]
            }
          } else {
            echo "ℹ️ Aucun fichier d'état précédent trouvé (${env.BUILD_STATE_FILE})"
            buildState.previousState = [:]
          }
          
          // Détection des changements
          def changedFiles = []
          try {
            changedFiles = sh(
              script: "git diff --name-only ${env.GIT_PREVIOUS_COMMIT} ${env.GIT_COMMIT}",
              returnStdout: true
            ).trim().split('\n')
          } catch (Exception e) {
            echo "⚠️ Impossible de détecter les changements: ${e.message}"
          }

          echo "🔍 Fichiers modifiés : ${changedFiles}"

          def services = env.SERVICES.split(',').collect { it.trim() } as Set
          def affectedServices = services.findAll { service ->
            changedFiles.any { file -> file.startsWith("${service}/") }
          } as Set

          // Ajouter les services précédemment en échec
          if (buildState.previousState?.services) {
            def previouslyFailed = buildState.previousState.services.findAll { 
              k, v -> v.status == 'FAILURE' 
            }.keySet()
            affectedServices.addAll(previouslyFailed)
          }

          echo "🚀 Services à builder : ${affectedServices}"
          env.AFFECTED_SERVICES = affectedServices.join(',')
        

          // Détection des changements avec gestion robuste
          /*def changedFiles = []
          try {
            // Méthode plus fiable pour obtenir les commits
            def gitPrevious = sh(script: 'git rev-parse HEAD~1', returnStdout: true).trim()
            def gitCurrent = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
            
            changedFiles = sh(
              script: "git diff --name-only ${gitPrevious} ${gitCurrent}",
              returnStdout: true
            ).trim().split('\n').findAll { it.trim().length() > 0 }
            
            echo "🔍 Fichiers modifiés : ${changedFiles}"
          } catch (Exception e) {
            echo "⚠️ Impossible de détecter les changements: ${e.message}"
            changedFiles = []
          }

          // Détection des services affectés
          def services = env.SERVICES.split(',').collect { it.trim() } as Set
          def affectedServices = services.findAll { service ->
            changedFiles.any { file -> file.startsWith("${service}/") }
          } as Set

          // Ajouter les services précédemment en échec
          if (buildState.previousState?.services instanceof Map) {
            def previouslyFailed = buildState.previousState.services.findAll { 
              k, v -> v?.status == 'FAILURE' 
            }.keySet()
            affectedServices.addAll(previouslyFailed)
          }

          echo "🚀 Services à builder : ${affectedServices}"
          env.AFFECTED_SERVICES = affectedServices.join(',')
        }*/
        }
      }
    }

    stage('Build Microservices') {
      steps {
        script {
          def servicesToBuild = env.AFFECTED_SERVICES.split(',').collect { it.trim() }.findAll { it }

          if (servicesToBuild.isEmpty()) {
            echo "ℹ️ Aucun service à builder - skip"
          } else {
            servicesToBuild.each { service ->
              echo "🚀 Déclenchement du job Jenkins pour ${service}"

              def buildResult = build job: "${service}/main",
                                   wait: true,
                                   propagate: false,
                                   parameters: []

              echo "🔎 Résultat du job ${service} : ${buildResult.result}"
              
              // Enregistrer le résultat
              buildResults[service] = buildResult.result
              buildState.services[service] = [
                status: buildResult.result,
                buildNumber: buildResult.number,
                buildUrl: buildResult.absoluteUrl,
                timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
              ]
            }
          }
          
          // Écrire le fichier d'état avec vérification
          try {
            def jsonContent = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(buildState))
            writeFile file: env.BUILD_STATE_FILE, text: jsonContent
            echo "✅ État du build sauvegardé dans ${env.BUILD_STATE_FILE}"
          } catch (Exception e) {
            echo "❌ Erreur lors de l'écriture du fichier d'état: ${e.getMessage()}"
          }
        }
      }
    }
  }

  post {
    failure {
      echo "❌ Pipeline orchestrateur échoué."
    }

    always {
      // Archive le fichier d'état comme artefact
      archiveArtifacts artifacts: env.BUILD_STATE_FILE, fingerprint: true
      
      // Affichage du résumé
      echo "📝 Résumé des builds:"
      script {
        buildResults.each { service, result ->
          echo "🔎 ${service} : ${result}"
        }
        
        def successCount = buildResults.count { k, v -> v == 'SUCCESS' }
        def failureCount = buildResults.count { k, v -> v == 'FAILURE' }
        def abortedCount = buildResults.count { k, v -> v == 'ABORTED' }
        echo "📊 TOTAL: ${buildResults.size()}, SUCCÈS: ${successCount}, ÉCHECS: ${failureCount}, ABANDONNÉS: ${abortedCount}"
        
        // Afficher le contenu du fichier d'état pour debug
        if (fileExists(env.BUILD_STATE_FILE)) {
          echo "Contenu du fichier d'état:"
          echo readFile(env.BUILD_STATE_FILE)
        }
      }
    }
  }
}